- name: Variable on play level
  hosts: all
  vars:
    URL: play.example.com
  tasks:
    - name: Print URL
      ansible.builtin.debug:
        msg: URL = {{URL}}

#Note: If we declare a variable in PLAY level then all the tasks can access that variable.

- name: variables from File in play level
  hosts: all
  vars_files:
    - sample-vars.yml
  tasks:
    - name: Print URL
      ansible.builtin.debug:
        msg: URL = {{URL}}

#We can load all the variables from a file, Since it is on a play level, all the tasks can access those variables

- name: Variable on task level
  hosts: all
  tasks:
    - name: Print URL in Task1
      ansible.builtin.debug:
        msg: URL == {{URL}}
      vars:
        URL: task1.example.com

    - name: Print URL in Task2
      ansible.builtin.debug:
       msg: URL == {{URL}}
      vars:
        URL: task2.example.com

## Scope of the task variable is only to that task, the other task cannot access the other task variables.

## Variable Precedence
- name: Variable Precedence
  hosts: all
  vars:
    URL: play.example.com
  vars_files:
    - sample-vars.yml
  tasks:
    - name: Print URL
      ansible.builtin.debug:
        msg: URL == {{URL}}
      vars:
        URL: task.example.com

## Print Hostname of the remote node

- name: Print Hostname of remote node
  hosts: all
  tasks:
    - name: Print Hostname
      ansible.builtin.debug:
        msg: Hostname = {{ansible_hostname}}
    - name: Print Processor Info
      ansible.builtin.debug:
        msg: "{{ansible_processor}}"
- name: Register a variable
  hosts: all
  tasks:
    - name: Run uptime command
      ansible.builtin.shell: uptime
      register: OUT
#    - name: Print OUT Variable
#      ansible.builtin.debug:
#        msg: "{{OUT.stdout}}"

    - name: Declare a standard variable name
      ansible.builtin.set_fact:
        UPTIME_STDOUT: "{{OUT.stdout}}"

    - name: Print UPTIME_STDOUT
      ansible.builtin.debug:
        msg: "{{UPTIME_STDOUT}}"